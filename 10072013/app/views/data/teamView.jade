extends ../layout 

block content
    script(src='/libraries/RGraph/RGraph.common.core.js')
    script(src='/libraries/RGraph/RGraph.common.dynamic.js')
    script(src='/libraries/RGraph/RGraph.common.key.js')
    script(src='/libraries/RGraph/RGraph.drawing.rect.js')
    script(src='/libraries/RGraph/RGraph.common.tooltips.js')
    script(src='/libraries/RGraph/RGraph.common.effects.js')
    script(src='/libraries/RGraph/RGraph.radar.js')
    script(type='text/javascript', src='/javascripts/excanvas.js')
    script(src='/assets/js/bootstrap-tab.js')
    script(src='/lib/angular/angular.js')
    script(src='/js/controllers.js')
    script.
          window.onload = function ()
          {
            var pathArray = window.location.pathname.split( '/' );
            $.ajax({
                url: '/JSON/'+pathArray[3],
                success: function(data, textStatus, jqXHR){
                    var res = jqXHR.responseText;
                    var parsed = $.parseJSON(res).data

                    var questionArray = new Array();
                    var countArray = new Array();
                    var optionArray = new Array();
                    var quarterArray = new Array();

                    for(i=0; i<parsed.surveys.length; i++){
                        if($.inArray(parsed.surveys[i].quarter, quarterArray) == -1){
                            quarterArray[quarterArray.length] = parsed.surveys[i].quarter;
                        }
                    }
                    for(i=0; i< quarterArray.length; i++){
                        $("#quarterSelect").append("<option value='" + quarterArray[i] + "'> " + quarterArray[i] + "</option>");
                    }

                    questionArray = [
                        "Team size ten or fewer",
                        "Scrum master supports two or fewer teams",
                        "Scrum master dedicated role (full time as a scrum master)",
                        "Product owner supports three or fewer teams",
                        "Product owner local and easily available for meetings and conversations",
                        "Quality engineer local and easily available for meetings and conversations",
                        "Interaction designer (UX) local and easily available for meetings and conversations",
                        "Architect local and easily available for meetings and conversations",
                        "Developers only on one team",
                        "Testers only on one team",
                        "Same time zone",
                        "Same office building",
                        "Same area of office",
                        "Shared team space",
                        "Physical scrum board",
                        "team Wiki",
                        "Meeting area easily available",
                        "Pairing stations easily available",
                        "Whiteboards easily available",
                        "Projector easily available",
                        "Vision",
                        "Product data sheet",
                        "Roadmap",
                        "Revenue trend",
                        "Personas",
                        "User workflow/context scenario list",
                        "Architecture block diagram",
                        "Architecture sequence diagram",
                        "Agile scorecard",
                        "Metric trends",
                        "Backlog grooming meeting every sprint",
                        "Sprint planning meeting fast and effective",
                        "Daily stand-up meetings fast and effective",
                        "Demo/review meeting effective and focused on showing product",
                        "Retrospective meeting varied and effective - follow through on improvements",
                        "Two week sprints",
                        "Quarterly release trains",
                        "Scrum of scrums effective managing dependencies (or only one team)",
                        "Definition of Ready (before sprint planning) checklist posted and used",
                        "Definition of Done checklist posted and used",
                        "Story name follows conventions",
                        "Spike considered",
                        "Independent (of other stories and teams)",
                        "Negotiable",
                        "Valuable (to end user preferably - PO understands and accepts value)",
                        "Estimated (relative story points assigned by whole team)",
                        "Small (enable continuous flow of stories closing 6-10 per sprint)",
                        "Testable (acceptance criteria documented and failure modes considered)",
                        "Prioritized",
                        "UX complete if applicable (wireframes/mock-ups/screens)",
                        "Verification dry run",
                        "Validation dry run, including formative usability testing",
                        "Automated unit tests",
                        "TDD",
                        "Automated acceptance/regression tests",
                        "BDD",
                        "All bugs associated with the story closed",
                        "User documentation complete",
                        "QMS design documents content updated",
                        "User/customer feedback",
                        "Verification dry run",
                        "Validation dry run, including formative usability testing",
                        "Automated unit tests",
                        "TDD",
                        "Automated acceptance/regression tests",
                        "BDD",
                        "All bugs associated with the story closed",
                        "User documentation complete",
                        "QMS design documents content updated",
                        "User/customer feedback",
                        "Build triggered",
                        "Install generated",
                        "Unit tests run",
                        "Smoke test run",
                        "Acceptance/regression tests run",
                        "Static code analysis run",
                        "Results recorded",
                        "Team notified of breaks through email",
                        "Team notified of breaks through dashboard or ambient tech",
                        "Gated check-in (if any step fails, the change is rejected)"
                    ];
                    countArray = [
                        "one",
                        "two",
                        "three",
                        "four",
                        "five",
                        "six",
                        "seven",
                        "eight",
                        "nine",
                        "ten"
                    ];
                    optionArray = [
                        "team",
                        "environment",
                        "informationRadiators",
                        "process",
                        "definitionOfReady",
                        "definitionOfDone",
                        "qualityMetrics",
                        "continuousIntegration",
                    ];

                    var catObj = new Array();
                    catObj = [
                        'Team', 
                        'Environment',
                        'Context',
                        'Process',
                        'Ready',
                        'Done',
                        'Quality',
                        'CI'
                    ]
                    var catSub = new Array();
                    catSub = [
                          'Happy', 
                          'Focused',
                          'Work/Life',
                          'Scope',
                          'Quality', 
                          'Tech Debt', 
                          'Back log', 
                          'No Knowledge Silos',
                          'User Feedback',
                          'Improving'
                      ]

                    function countSum(category){
                        var sum = 0;
                        for(var z=0; z<10; z++){
                            sum = sum + category[z];
                        }
                        return sum;
                    }   
                    function arrayGenObjective(team){
                        var array = new Array();
                        array[0] = countSum(team.team);
                        array[1] = countSum(team.environment);
                        array[2] = countSum(team.informationRadiators);
                        array[3] = countSum(team.process);
                        array[4] = countSum(team.definitionOfReady);
                        array[5] = countSum(team.definitionOfDone);
                        array[6] = countSum(team.qualityMetrics);
                        array[7] = countSum(team.continuousIntegration);
                        return array;
                    }
                    function arrayGenSubjective(team){
                        var array = new Array();
                            for(i=0; i<10; i++){
                                array[i] = team.subjective[i];
                            }
                        return array;
                     }

                    function generateRadarAndIssues(parsed, year){
                         $("#subClear").empty();
                         $("#subClear").append("<canvas id='cvs2' width='500' height='300'> [No Canvas Support] <canvas>")
                         $("#objClear").empty();
                         $("#objClear").append("<canvas id='cvs' width='500' height='300'> [No Canvas Support] <canvas>")
                        
                        var radarObjectiveVals = new Array();  
                        for(i=0; i < parsed.surveys.length; i++){
                            radarObjectiveVals[i] = new Array();
                            var array = arrayGenObjective(parsed.surveys[i])

                            if(parsed.surveys[i].quarter.indexOf(year) != -1){
                                    for(j=0; j < array.length; j++){
                                        radarObjectiveVals[i][j] = array[j]
                                    }  
                            } else {
                                    for(j=0; j < array.length; j++){
                                        radarObjectiveVals[i][j] = 0;
                                    }
                            }
                        }

                        var radarSubjectiveVals = new Array();
                        for(var i=0; i < parsed.surveys.length; i++){
                            radarSubjectiveVals[i] = new Array();
                            var array2 = arrayGenSubjective(parsed.surveys[i])
                            if(parsed.surveys[i].quarter.indexOf(year) != -1){
                                    for(j=0; j < array2.length; j++){
                                        radarSubjectiveVals[i][j] = array2[j];
                                    } 
                            } else {
                                    for(j=0; j < array2.length; j++){
                                        radarSubjectiveVals[i][j] = 0;
                                    } 
                            } 
                        }

                        var quarters = new Array();
                        for(i=0; i<parsed.surveys.length; i++){
                            if($.inArray(parsed.surveys[i].quarter, quarters) && parsed.surveys[i].quarter.indexOf($("#yearSelect").val()) != -1 ){
                                quarters[quarters.length] = parsed.surveys[i].quarter;
                            }
                        }


                        var radarObjective = new RGraph.Radar('cvs', radarObjectiveVals)
                        .Set('labels', catObj)
                        .Set('background.circles.poly', true)
                        .Set('background.circles.spacing', 30)
                        .Set('colors', ['rgba(255,51,51,0.25)','rgba(51,255,51,0.25)', 'rgba(51,51,255,0.25)', 'rgba(153,51,255,0.25)'])
                        .Set('axes.color', 'transparent')
                        .Set('highlights', true)
                        .Set('key', quarters)
                        .Set('key.interactive', true)
                        .Set('strokestyle', ['red','green', 'blue', 'orange'])
                        .Draw();  
                      

                        var radarSubjective = new RGraph.Radar('cvs2', radarSubjectiveVals)
                        .Set('labels', catSub)
                        .Set('background.circles.poly', true)
                        .Set('background.circles.spacing', 30)
                        .Set('colors', ['rgba(255,51,51,0.25)','rgba(51,255,51,0.25)', 'rgba(51,51,255,0.25)', 'rgba(153,51,255,0.25)'])
                        .Set('axes.color', 'transparent')
                        .Set('key', quarters)
                        .Set('key.interactive', true)
                        .Set('highlights', true)
                        .Set('strokestyle', ['red','green','blue', 'orange'])
                        .Draw();
                        //RGraph.Effects.Radar.Grow(radarSubjective);
                    }
                    function objectiveScoreDetail(team, quarter, optionArray, countArray) {
                        var z = 0;
                            $("#teamBody").empty();
                            $("#environmentBody").empty();
                            $("#contextBody").empty();
                            $("#processBody").empty();
                            $("#readyBody").empty();
                            $("#doneBody").empty();
                            $("#qualityBody").empty();
                            $("#CIBody").empty();

                            while(z>-1 && z < 10){
                                for(i=0; i<team.surveys.length; i++){
                                    //console.log([team.surveys[i][optionArray[Math.floor(z/10)]]])

                                    if(team.surveys[i].quarter == quarter){
                                        if([team.surveys[i][optionArray[Math.floor(z/10)]][z%10]] ==1){
                                            $("#teamBody").append("<tr class='success'><td><i class='icon-ok' style='margin-right:10px;'> </i>" + questionArray[z] + "</td></tr>");
                                        } else {
                                            $("#teamBody").append("<tr><td>" + questionArray[z] + "</td></tr>");
                                        }
                                    }
                                }
                                z++;
                            } 
                            while(z>9 && z < 20){
                                for(i=0; i<team.surveys.length; i++){
                                    //console.log([team.surveys[i][optionArray[Math.floor(z/10)]]])
                                    
                                    if(team.surveys[i].quarter == quarter){
                                        if(team.surveys[i][optionArray[Math.floor(z/10)]][z%10] ==1){
                                            $("#environmentBody").append("<tr class='success'><td><i class='icon-ok' style='margin-right:10px;'> </i>" + questionArray[z] + "</td></tr>");
                                        } else {
                                            $("#environmentBody").append("<tr><td>" + questionArray[z] + "</td></tr>");
                                        }
                                    }
                                }
                                z++;
                            }
                            while(z>19 && z < 30){
                                for(i=0; i<team.surveys.length; i++){
                                    if(team.surveys[i].quarter == quarter){
                                        if([team.surveys[i][optionArray[Math.floor(z/10)]][z%10]] ==1){
                                            $("#contextBody").append("<tr class='success'><td><i class='icon-ok' style='margin-right:10px;'> </i>" + questionArray[z] + "</td></tr>");
                                        } else {
                                            $("#contextBody").append("<tr><td>" + questionArray[z] + "</td></tr>");
                                        }
                                    }
                                }
                                z++;
                            }      
                            while(z>29 && z < 40){
                                for(i=0; i<team.surveys.length; i++){
                                    if(team.surveys[i].quarter == quarter){
                                        if([team.surveys[i][optionArray[Math.floor(z/10)]][z%10]] ==1){
                                            $("#processBody").append("<tr class='success'><td><i class='icon-ok' style='margin-right:10px;'> </i>" + questionArray[z] + "</td></tr>");
                                        } else {
                                            $("#processBody").append("<tr><td>" + questionArray[z] + "</td></tr>");
                                        }
                                    }
                                }
                                z++;
                            }  
                            while(z>39 && z < 50){
                                for(i=0; i<team.surveys.length; i++){
                                    if(team.surveys[i].quarter == quarter){
                                        if([team.surveys[i][optionArray[Math.floor(z/10)]][z%10]] ==1){
                                            $("#readyBody").append("<tr class='success'><td><i class='icon-ok' style='margin-right:10px;'> </i>" + questionArray[z] + "</td></tr>");
                                        } else {
                                            $("#readyBody").append("<tr><td>" + questionArray[z] + "</td></tr>");
                                        }
                                    }
                                }
                                z++;
                            } 
                            while(z>49 && z < 60){
                                for(i=0; i<team.surveys.length; i++){
                                    if(team.surveys[i].quarter == quarter){
                                        if([team.surveys[i][optionArray[Math.floor(z/10)]][z%10]] ==1){
                                            $("#doneBody").append("<tr class='success'><td><i class='icon-ok' style='margin-right:10px;'> </i>" + questionArray[z] + "</td></tr>");
                                        } else {
                                            $("#doneBody").append("<tr><td>" + questionArray[z] + "</td></tr>");
                                        }
                                    }
                                }
                                z++;
                            } 
                            while(z>59 && z < 70){
                                for(i=0; i<team.surveys.length; i++){
                                    if(team.surveys[i].quarter == quarter){
                                        if([team.surveys[i][optionArray[Math.floor(z/10)]][z%10]] ==1){
                                            $("#qualityBody").append("<tr class='success'><td><i class='icon-ok' style='margin-right:10px;'> </i>" + questionArray[z] + "</td></tr>");
                                        } else {
                                            $("#qualityBody").append("<tr><td>" + questionArray[z] + "</td></tr>");
                                        }
                                    }
                                }
                                z++;
                            } 
                            while(z>69 && z < 80){
                                for(i=0; i<team.surveys.length; i++){
                                    if(team.surveys[i].quarter == quarter){
                                        if([team.surveys[i][optionArray[Math.floor(z/10)]][z%10]] ==1){
                                            $("#CIBody").append("<tr class='success'><td><i class='icon-ok' style='margin-right:10px;'> </i>" + questionArray[z] + "</td></tr>");
                                        } else {
                                            $("#CIBody").append("<tr><td>" + questionArray[z] + "</td></tr>");
                                        }
                                    }
                                }
                                z++;
                            } 

                    }

                    objectiveScoreDetail(parsed, $("#quarterSelect").val(), optionArray, countArray);

                    generateRadarAndIssues(parsed, new Date().getFullYear());

                    $("#quarterSelect").change(function(){
                        objectiveScoreDetail(parsed, $("#quarterSelect").val(), optionArray, countArray);
                    });
                    $("#yearSelect").change(function(){
                        generateRadarAndIssues(parsed, $("#yearSelect").val());
                    })

                    if(parsed.disbanded == true){
                        $("#disbandedNotification").append("<div class='alert alert-error'> <h4>Important Information:</h4> This team is no longer active. </div>")
                    }
                  
              }
            })

          }
    div(ng-app, ng-controller='IndividualTeam')      
        .jumbotron.subhead(style="padding-top: 80px")
            .container
                h2 Team Name: {{team.teamName}}
                blockquote
                    p
                        h5
                            | Current Product: {{team.surveys[team.surveys.length-1].currentProduct}}
                        h5
                            | Current Project: {{team.surveys[team.surveys.length-1].currentProject}}
        .container(style="margin-top: 20px;")
            #disbandedNotification
        .container(style="margin-top: 20px;")
            .row-fluid
                .span2
                    .well
                        p Business: {{team.business}}
                        p Site: {{team.site}}
                        select.input-block-level#yearSelect 
                            option(value="2013") 2013
                            option(value="2014") 2014
                            option(value="2015") 2015
                .span8
                    table.table.table-striped
                        thead
                            tr 
                                th Quarter
                                th Improvement Goal
                                th Tool Issues
                        tbody
                            tr(ng-repeat='survey in surveys')
                                td {{survey.quarter}}
                                td {{survey.improvementGoal}}
                                td {{survey.issues}}
                .span2
                    .well 
                        a.btn.btn-large.btn-block.btn-success(href="/data/team/#{teamResult.teamName}/print") Print Profile
                        a.btn.btn-large.btn-block.btn-primary(href="/surveys/add") Add Survey
            .row-fluid
                .span6
                    .page-header
                        h2 Team Profile
                    table.table.table-hover
                        thead
                            tr
                                th Role 
                                th Member
                        tbody
                            tr
                                td Scrum Master
                                td {{team.scrumMaster.last}}, {{team.scrumMaster.first}} | {{team.scrumMaster.SSO}}
                            tr
                                td Product Owner
                                td {{team.productOwner.last}}, {{team.productOwner.first}} | {{team.productOwner.SSO}}
                            tr
                                td Interaction Designer
                                td {{team.interactionDesigner.last}}, {{team.interactionDesigner.first}} | {{team.interactionDesigner.SSO}}
                            tr
                                td Quality Engineer
                                td {{team.qualityEngineer.last}}, {{team.qualityEngineer.first}} | {{team.qualityEngineer.SSO}}
                            tr
                                td Architect
                                td {{team.architect.last}}, {{team.architect.first}} | {{team.architect.SSO}}
                            tr(ng-repeat='members in team.teamMembers')
                                td Team Member {{$index + 1}}
                                td {{members.last}}, {{members.first}} | {{members.SSO}}
                .span6 
                    .page-header
                        h2 Subjective Score
                    #subClear
                        canvas#cvs2(width='500', height='300') [No canvas support]
            .row-fluid 
                .span6
                    .page-header
                        h2 Objective Score Detail
                    select.span12#quarterSelect

                    ul#myTab.nav.nav-tabs
                        li.active
                            a(href='#team', data-toggle='tab') Team
                          li
                            a(href='#environment', data-toggle='tab') Environment
                          li
                            a(href='#context', data-toggle='tab') Context
                          li
                            a(href='#process', data-toggle='tab') Process
                          li
                            a(href='#ready', data-toggle='tab') Ready
                          li
                            a(href='#done', data-toggle='tab') Done
                          li
                            a(href='#quality', data-toggle='tab') Quality
                          li
                            a(href='#CI', data-toggle='tab') CI
                    #myTabContent.tab-content
                        #team.tab-pane.fade.in.active
                            table.table.table-hover
                                tbody#teamBody
                        #environment.tab-pane.fade
                            table.table.table-hover
                                tbody#environmentBody
                        #context.tab-pane.fade
                            table.table.table-hover
                                tbody#contextBody
                        #process.tab-pane.fade
                            table.table.table-hover
                                tbody#processBody
                        #ready.tab-pane.fade
                            table.table.table-hover
                                tbody#readyBody
                        #done.tab-pane.fade
                            table.table.table-hover
                                tbody#doneBody
                        #quality.tab-pane.fade
                            table.table.table-hover
                                tbody#qualityBody
                        #CI.tab-pane.fade
                            table.table.table-hover
                                tbody#CIBody
       
                .span6
                    .page-header
                        h2 Objective Score
                    #objClear
                        canvas#cvs(width='550', height='300') [No canvas support]
                    table.table.table-hover
                        thead
                            td 
                        tbody
                            -for (var i = 0; i < teamResult.surveys.length ; i++) {
                                tr
                                    td= "Build Time: " + teamResult.surveys[i].buildTime
                                    td= "Hardening Sprints " + teamResult.surveys[i].hardeningSprints    
                            - };
